pipeline{
    agent any
    environment{
        NEXUS_RELEASE_REPO ="mylibs-Release"
        NEXUS_SNAP_REPO="mylibs-Snapshot"
        NEXUS_CENTRAL_REPO ="mylibs-maven-central"
        NEXUS_GRP_REPO="mylibs-Group"
        NEXUS_USER="admin"
        NEXUS_PASS="admin"
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUSPORT="8081"
        NEXUSIP = "52.73.31.118"
        ARTVERSION = "${env.BUILD_ID}"
        NEXUS_CREDENTIAL_ID ="nexus-credentials"
	NEXUS_URL = "52.73.31.118:8081"
        SONARSERVER="sonarserver"
        SONARSCANNER="sonarscanner"
    }

    stages{
         stage('version-ctrl'){
            steps{
                 git branch: 'main', url: 'https://github.com/devsecopsmurali/Java-Servlets-Example.git'
            }
        }
        
        stage('BUILD'){
            steps {
                sh 'mvn -s settings.xml -DskipTests  clean install package'
            }
             post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

        stage('CODE ANALYSIS with SONARQUBE') {
          
		  environment {
             scannerHome = tool "${SONARSCANNER}"
          }

          steps {
            withSonarQubeEnv("${SONARSERVER}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=Java-Servlets-Example \
                   -Dsonar.host.url=http://18.207.0.26 \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.login=29052d922b10bf0eed7cd1c8cac13759b85bbbd4
            }
          }
        }
}
                 stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version} ARTVERSION";
		nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_RELEASE_REPO,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } 
		    else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

    }
}
